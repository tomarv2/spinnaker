currentDeployment: default
deploymentConfigurations:
- name: default
  version: 1.8.5
  providers:
    appengine:
      enabled: false
      accounts: []
    aws:
      enabled: true
      accounts:
      - name: nonprod-spinnaker
        requiredGroupMembership: []
        providerVersion: V1
        permissions: {}
        accountId: '987654321'
        regions:
        - name: us-west-2
        assumeRole: role/spinnakerManaged
      primaryAccount: nonprod-spinnaker
      bakeryDefaults:
        baseImages: []
      accessKeyId: AKIA
      secretAccessKey: OytF
      defaultKeyPairTemplate: '{{name}}-keypair'
      defaultRegions:
      - name: us-west-2
      defaults:
        iamRole: role/BaseIAMRole
    ecs:
      enabled: false
      accounts: []
    azure:
      enabled: false
      accounts: []
      bakeryDefaults:
        templateFile: azure-linux.json
        baseImages: []
    dcos:
      enabled: false
      accounts: []
      clusters: []
    dockerRegistry:
      enabled: true
      accounts:
      - name: aws-ecr-registry
        address: https://1234567890.dkr.ecr.us-west-2.amazonaws.com
        username: AWS
        passwordFile: /tmp/ecr-secret-token
        repositories:
        - devops/nifi-1.7.0
      - name: dcr-docker-registry
        requiredGroupMembership:
        - cicd_pipelines
        providerVersion: V1
        permissions: {}
        address: https://abc.tomarv2.com
        username: devops
        password: abc123
        email: dev.ops@tomarv2.com
        cacheIntervalSeconds: 300
        clientTimeoutMillis: 60000
        cacheThreads: 1
        paginateSize: 100
        sortTagsByDate: false
        trackDigests: false
        insecureRegistry: false
        repositories:
        - tomarv2/jenkins-slave
        - tomarv2/kafka/base
        - tomarv2/kafka/broker
        - tomarv2/kafka/confluent-base
        - tomarv2/kafka/manager
        - tomarv2/kafka/mirror
        - tomarv2/kafka/schema-registry
      primaryAccount: dcr-docker-registry
    google:
      enabled: false
      accounts: []
      bakeryDefaults:
        templateFile: gce.json
        baseImages: []
        zone: us-central1-f
        network: default
        useInternalIp: false
    kubernetes:
      enabled: true
      accounts:
      - name: abc123
        requiredGroupMembership: []
        providerVersion: V1
        permissions: {}
        dockerRegistries:
        - accountName: aws-ecr-registry 
          namespaces: []
        - accountName: dcr-docker-registry
          namespaces: []
        context: demo_context
        configureImagePullSecrets: true
        namespaces:
        - services
        omitNamespaces: []
        kinds: []
        omitKinds: []
        customResources: []
        kubeconfigFile: /home/spinnaker/.kube/config
      - name: poc-contact-intelligence
        requiredGroupMembership: []
        providerVersion: V1
        permissions: {}
        dockerRegistries:
        - accountName: aws-ecr-registry 
          namespaces: []
        - accountName: dcr-docker-registry
          namespaces: []
        context: poc_context
        configureImagePullSecrets: true
        namespaces: []
        omitNamespaces: []
        kinds: []
        omitKinds: []
        customResources: []
        kubeconfigFile: /home/spinnaker/.kube/config
      - name: qa-sharedservices
        requiredGroupMembership: []
        providerVersion: V1
        permissions: {}
        dockerRegistries:
        - accountName: aws-ecr-registry 
          namespaces: []
        - accountName: dcr-docker-registry
          namespaces: []
        context: qa_context
        configureImagePullSecrets: true
        namespaces:
        - sharedservices
        omitNamespaces: []
        kinds: []
        omitKinds: []
        customResources: []
        kubeconfigFile: /home/spinnaker/.kube/config
      - name: qa-dataengr
        requiredGroupMembership: []
        providerVersion: V1
        permissions: {}
        dockerRegistries:
        - accountName: aws-ecr-registry 
          namespaces: []
        - accountName: dcr-docker-registry
          namespaces: []
        context: qa_context
        configureImagePullSecrets: true
        namespaces:
        - dataengr
        omitNamespaces: []
        kinds: []
        omitKinds: []
        customResources: []
        kubeconfigFile: /home/spinnaker/.kube/config
      - name: qa-services
        requiredGroupMembership: []
        providerVersion: V1
        permissions: {}
        dockerRegistries:
        - accountName: aws-ecr-registry 
          namespaces: []
        - accountName: dcr-docker-registry
          namespaces: []
        context: qa_context
        configureImagePullSecrets: true
        namespaces:
        - services
        omitNamespaces: []
        kinds: []
        omitKinds: []
        customResources: []
        kubeconfigFile: /home/spinnaker/.kube/config
      - name: stg-dataengr
        requiredGroupMembership: []
        providerVersion: V1
        permissions: {}
        dockerRegistries:
        - accountName: aws-ecr-registry 
          namespaces: []
        - accountName: dcr-docker-registry
          namespaces: []
        context: prod_context
        configureImagePullSecrets: true
        namespaces:
        - stg-dataengr
        omitNamespaces: []
        kinds: []
        omitKinds: []
        customResources: []
        kubeconfigFile: /home/spinnaker/.kube/config
      - name: prod-services
        requiredGroupMembership: []
        providerVersion: V1
        permissions: {}
        dockerRegistries:
        - accountName: aws-ecr-registry 
          namespaces: []
        - accountName: dcr-docker-registry
          namespaces: []
        context: prod_context
        configureImagePullSecrets: true
        namespaces:
        - services
        - sharedservices
        omitNamespaces: []
        kinds: []
        omitKinds: []
        customResources: []
        kubeconfigFile: /home/spinnaker/.kube/config
      - name: prod-dataengr
        requiredGroupMembership: []
        providerVersion: V1
        permissions: {}
        dockerRegistries:
        - accountName: aws-ecr-registry 
          namespaces: []
        - accountName: dcr-docker-registry
          namespaces: []
        context: prod_context
        configureImagePullSecrets: true
        namespaces:
        - dataengr
        - sharedservices
        omitNamespaces: []
        kinds: []
        omitKinds: []
        customResources: []
        kubeconfigFile: /home/spinnaker/.kube/config
      - name: aws-sharedservices
        requiredGroupMembership: []
        providerVersion: V1
        permissions: {}
        dockerRegistries:
        - accountName: aws-ecr-registry 
          namespaces: []
        - accountName: dcr-docker-registry
          namespaces: []
        context: aws_context
        configureImagePullSecrets: true
        namespaces:
        - sharedservices
        omitNamespaces: []
        kinds: []
        omitKinds: []
        customResources: []
        kubeconfigFile: /home/spinnaker/.kube/config
      - name: sharedservices
        requiredGroupMembership: []
        providerVersion: V1
        permissions: {}
        dockerRegistries:
        - accountName: aws-ecr-registry 
          namespaces: []
        - accountName: dcr-docker-registry
          namespaces: []
        context: prod_context
        configureImagePullSecrets: true
        namespaces:
        - sharedservices
        omitNamespaces: []
        kinds: []
        omitKinds: []
        customResources: []
        kubeconfigFile: /home/spinnaker/.kube/config
      - name: aws-stg-services
        requiredGroupMembership: []
        providerVersion: V1
        permissions: {}
        dockerRegistries:
        - accountName: aws-ecr-registry 
          namespaces: []
        - accountName: dcr-docker-registry
          namespaces: []
        context: aws_context
        configureImagePullSecrets: true
        namespaces:
        - stg-services
        - sharedservices
        omitNamespaces: []
        kinds: []
        omitKinds: []
        customResources: []
        kubeconfigFile: /home/spinnaker/.kube/config
      - name: aws-prod-dataengr
        requiredGroupMembership: []
        providerVersion: V1
        permissions: {}
        dockerRegistries:
        - accountName: aws-ecr-registry 
          namespaces: []
        - accountName: dcr-docker-registry
          namespaces: []
        context: aws_context
        configureImagePullSecrets: true
        namespaces:
        - dataengr
        - sharedservices
        omitNamespaces: []
        kinds: []
        omitKinds: []
        customResources: []
        kubeconfigFile: /home/spinnaker/.kube/config
      - name: aws-stg-dataengr
        requiredGroupMembership: []
        providerVersion: V1
        permissions: {}
        dockerRegistries:
        - accountName: aws-ecr-registry 
          namespaces: []
        - accountName: dcr-docker-registry
          namespaces: []
        context: aws_context
        configureImagePullSecrets: true
        namespaces:
        - stg-dataengr
        - sharedservices
        omitNamespaces: []
        kinds: []
        omitKinds: []
        customResources: []
        kubeconfigFile: /home/spinnaker/.kube/config
      - name: aws-prod-services
        requiredGroupMembership: []
        providerVersion: V1
        permissions: {}
        dockerRegistries:
        - accountName: aws-ecr-registry 
          namespaces: []
        - accountName: dcr-docker-registry
          namespaces: []
        context: aws_context
        configureImagePullSecrets: true
        namespaces:
        - services
        - sharedservices
        omitNamespaces: []
        kinds: []
        omitKinds: []
        customResources: []
        kubeconfigFile: /home/spinnaker/.kube/config
      - name: qa-contact-intelligence
        requiredGroupMembership: []
        providerVersion: V1
        permissions: {}
        dockerRegistries:
        - accountName: aws-ecr-registry 
          namespaces: []
        - accountName: dcr-docker-registry
          namespaces: []
        context: qa_context
        configureImagePullSecrets: true
        namespaces:
        - contact-intelligence
        - application-platform
        omitNamespaces: []
        kinds: []
        omitKinds: []
        customResources: []
        kubeconfigFile: /home/spinnaker/.kube/config
      - name: prod-contact-intelligence
        requiredGroupMembership: []
        providerVersion: V1
        permissions: {}
        dockerRegistries:
        - accountName: aws-ecr-registry 
          namespaces: []
        - accountName: dcr-docker-registry
          namespaces: []
        context: prod_context
        configureImagePullSecrets: true
        namespaces:
        - contact-intelligence
        - application-platform
        omitNamespaces: []
        kinds: []
        omitKinds: []
        customResources: []
        kubeconfigFile: /home/spinnaker/.kube/config
      - name: prod-k8s-v2-account
        requiredGroupMembership: []
        providerVersion: V2
        permissions: {}
        dockerRegistries: []
        context: prod_context
        configureImagePullSecrets: true
        namespaces: []
        omitNamespaces: []
        kinds: []
        omitKinds: []
        customResources: []
        kubeconfigFile: /home/spinnaker/.kube/config
      - name: qa-k8s-v2-account
        requiredGroupMembership: []
        providerVersion: V2
        permissions: {}
        dockerRegistries: []
        context: qa_context
        configureImagePullSecrets: true
        namespaces: []
        omitNamespaces: []
        kinds: []
        omitKinds: []
        customResources: []
        kubeconfigFile: /home/spinnaker/.kube/config
      primaryAccount: prod-k8s-v2-account
    openstack:
      enabled: false
      accounts: []
      bakeryDefaults:
        baseImages: []
    oraclebmcs:
      enabled: false
      accounts: []
  deploymentEnvironment:
    size: SMALL
    type: Distributed
    accountName: prod-dataengr
    updateVersions: true
    consul:
      enabled: false
    vault:
      enabled: false
    customSizing: {}
    gitConfig:
      upstreamUser: spinnaker
  persistentStorage:
    persistentStoreType: s3
    azs: {}
    gcs:
      rootFolder: front50
    redis: {}
    s3:
      bucket: spinnaker-devops-setup-prod
      rootFolder: front50
      region: us-west-2
      accessKeyId: AKIA
      secretAccessKey: cx6bxCPO4h4uU5qw8D2CZ7UwAF8D3ZNXdS4UEYNa
    oraclebmcs: {}
  features:
    auth: true
    fiat: true
    chaos: false
    entityTags: true
    jobs: true
    pipelineTemplates: true
    artifacts: true
  metricStores:
    datadog:
      enabled: false
    prometheus:
      enabled: false
      add_source_metalabels: true
    stackdriver:
      enabled: false
    period: 30
    enabled: false
  notifications:
    slack:
      enabled: false
  timezone: America/Los_Angeles
  ci:
    jenkins:
      enabled: true
      masters:
      - name: dynamic-jenkins-master
        address: http://dynamic-jenkins.services.tomarv2.com:80
        username: dev.ops@tomarv2.com
        password: abc123
    travis:
      enabled: false
      masters: []
  security:
    apiSecurity:
      ssl:
        enabled: false
        keyAlias: spinnaker
      overrideBaseUrl: http://spin-gate.spinnaker.services.tomarv2.com
    uiSecurity:
      ssl:
        enabled: false
      overrideBaseUrl: http://spinnaker.services.tomarv2.com
    authn:
      oauth2:
        enabled: false
        client: {}
        resource: {}
        userInfoMapping: {}
      saml:
        enabled: false
      ldap:
        enabled: false
      x509:
        enabled: false
      enabled: false
    authz:
      groupMembership:
        service: EXTERNAL
        google:
          roleProviderType: GOOGLE
        github:
          roleProviderType: GITHUB
        file:
          roleProviderType: FILE
      enabled: true
  artifacts:
    gcs:
      enabled: false
      accounts: []
    github:
      enabled: false
      accounts: []
    http:
      enabled: false
      accounts: []
    s3:
      enabled: false
      accounts: []
  pubsub:
    google:
      enabled: false
      subscriptions: []
  canary:
    enabled: false
    serviceIntegrations:
    - name: google
      enabled: false
      accounts: []
      gcsEnabled: false
      stackdriverEnabled: false
    - name: prometheus
      enabled: false
      accounts: []
    - name: datadog
      enabled: false
      accounts: []
    - name: aws
      enabled: false
      accounts: []
      s3Enabled: false
    reduxLoggerEnabled: true
    defaultJudge: NetflixACAJudge-v1.0
    stagesEnabled: true
    templatesEnabled: true
    showAllConfigsEnabled: true
